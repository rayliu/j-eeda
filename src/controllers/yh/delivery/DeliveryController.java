package controllers.yh.delivery;import java.util.Calendar;import java.util.Collections;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import models.DeliveryOrderItem;import models.DeliveryOrderMilestone;import models.Party;import models.TransferOrder;import models.UserLogin;import models.yh.delivery.DeliveryOrder;import models.yh.profile.Contact;import org.apache.shiro.SecurityUtils;import org.apache.shiro.subject.Subject;import com.jfinal.core.Controller;import com.jfinal.log.Logger;import com.jfinal.plugin.activerecord.Db;import com.jfinal.plugin.activerecord.Record;import controllers.yh.LoginUserController;public class DeliveryController extends Controller {    private Logger logger = Logger.getLogger(DeliveryController.class);    // in config route已经将路径默认设置为/yh    // me.add("/yh", controllers.yh.AppController.class, "/yh");    Subject currentUser = SecurityUtils.getSubject();    private boolean isAuthenticated() {        if (!currentUser.isAuthenticated()) {            if (LoginUserController.isAuthenticated(this))                redirect("/yh/login");            return false;        }        setAttr("userId", currentUser.getPrincipal());        return true;    }    public void index() {        if (!isAuthenticated())            return;        if (LoginUserController.isAuthenticated(this))            render("/yh/delivery/deliveryOrderList.html");    }    public void add() {        setAttr("saveOK", false);        if (LoginUserController.isAuthenticated(this))            render("/yh/delivery/deliveryOrderSearchTransfer.html");    }    public void edit() {        String id = getPara();        DeliveryOrder tOrder = DeliveryOrder.dao.findById(id);        // 运输单信息        TransferOrder transferOrder = TransferOrder.dao.findById(tOrder                .get("TRANSFER_ORDER_ID"));        // 客户信息        Party customerContact = Party.dao                .findFirst("select *,p.id as customerId from party p,contact c where p.id ='"                        + tOrder.get("customer_id")                        + "'and p.contact_id = c.id");        // 供应商信息        Party spContact = Party.dao                .findFirst("select *,p.id as spId from party p,contact c where p.id ='"                        + tOrder.get("sp_id") + "'and p.contact_id = c.id");        List<Record> deliveryId = Db                .find("select TRANSFER_ORDER_ID from DELIVERY_ORDER where id ="                        + id);        String dd = deliveryId.get(0).get("TRANSFER_ORDER_ID").toString();        // 收货人信息        Contact notifyPartyContact = null;        if (tOrder.get("notify_party_id") != null) {            notifyPartyContact = (Contact) Contact.dao                    .findFirst(                            "select *,p.id as pid,c.id as contactId from party p, contact c where p.contact_id=c.id and p.id =?",                            tOrder.get("notify_party_id"));        }        setAttr("deliveryId", tOrder);        setAttr("transferId", dd);        setAttr("customer", customerContact);        setAttr("deliveryOrder", transferOrder);        setAttr("notifyParty", notifyPartyContact);        setAttr("spContact", spContact);        if (LoginUserController.isAuthenticated(this))            render("/yh/delivery/deliveryOrderEdit.html");    }    // 配送单客户    public void selectCustomer() {        List<Contact> customer = Contact.dao                .find("select * from contact where id in(select contact_id from party where id in(SELECT customer_id  FROM TRANSFER_ORDER group by customer_id)) and id='1'");        renderJson(customer);    }    /*     * // 供应商列表,列出最近使用的5个客户 public void selectSp() { List<Contact> contactjson =     * Contact.dao .find(     * "select * from contact c  where id in (select contact_id from party where party_type='SERVICE_PROVIDER' order by last_update_date desc limit 0,5)"     * ); renderJson(contactjson); }     */    public void creat2() {        String id = getPara("id");        String ser = getPara("ser");        if (!"".equals(ser)) {            List<DeliveryOrderItem> itemsId = DeliveryOrderItem.dao                    .find("select id from delivery_ORDER_ITEM where SERIAL_NO='"                            + ser + "'");            DeliveryOrderItem itemsIds = itemsId.get(0);            setAttr("itemsIds", itemsIds);        }        if (id != null) {            List<Contact> customers = Contact.dao                    .find("select *,p.id as customerId from contact c,party p,TRANSFER_ORDER t where p.contact_id=c.id and t.customer_id = p.id and t.id ="                            + id + "");            Contact customer = customers.get(0);            setAttr("customer", customer);        }        TransferOrder tOrder = TransferOrder.dao.findById(id);        setAttr("ser", ser);        setAttr("transferId", id);        setAttr("deliveryOrder", tOrder);        if (LoginUserController.isAuthenticated(this))            render("/yh/delivery/deliveryOrderEdit.html");    }    public void creat() {        // customer, sp, notify_party        String id = getPara();        System.out.println(id);        String ser = getPara("ser");        System.out.println(ser);        /*         * List<Record> jEs = new ArrayList<Record>(); jEs.get(0).set("id", id);         */        DeliveryOrderItem doi = new DeliveryOrderItem();        if (ser != null && ser != "") {            DeliveryOrderItem deliveryOrderItem = DeliveryOrderItem.dao                    .findFirst("select SERIAL_NO from DELIVERY_ORDER_ITEM where SERIAL_NO ='"                            + ser + "'");            if (deliveryOrderItem == null) {                List<Record> list = Db                        .find("SELECT t.*,t2.SERIAL_NO FROM tRANSFER_ORDER_ITEM_DETAIL t2,TRANSFER_ORDER_ITEM t where t2.ITEM_ID  =t.ID and t2.sERIAL_NO ='"                                + ser + "' ");                doi.set("order_id", list.get(0).get("order_id"))                        .set("SERIAL_NO", ser)                        .set("ITEM_NAME", list.get(0).get("item_name"))                        .set("WEIGHT", list.get(0).get("weight"))                        .set("amount", list.get(0).get("amount"))                        .set("volume", list.get(0).get("volume"));                doi.save();                /* jEs.get(0).set("id2", doi.get("id")); */            }        } else {            DeliveryOrderItem deliveryOrderItem = DeliveryOrderItem.dao                    .findFirst("select order_id from DELIVERY_ORDER_ITEM where order_id ='"                            + id + "'");            if (deliveryOrderItem == null) {                List<Record> list = Db                        .find("SELECT * FROM TRANSFER_ORDER_ITEM where order_id ='"                                + id + "'");                for (int i = 0; i < list.size(); i++) {                    DeliveryOrderItem doi2 = new DeliveryOrderItem();                    doi2.set("order_id", list.get(i).get("order_id"))                            .set("ITEM_NO", list.get(i).get("item_no"))                            .set("ITEM_NAME", list.get(i).get("item_name"))                            .set("WEIGHT", list.get(i).get("weight"))                            .set("amount", list.get(i).get("amount"))                            .set("volume", list.get(i).get("volume"));                    doi2.save();                }            }        }        if (LoginUserController.isAuthenticated(this))            // render("/yh/delivery/deliveryOrderEdit.html");            renderJson(id);        // renderJson(jEs);        // renderJson("{\"success\":true}");    }    // 创建 结构 行为    public void deliveryOrderList() {        String sLimit = "";        String pageIndex = getPara("sEcho");        if (getPara("iDisplayStart") != null                && getPara("iDisplayLength") != null) {            sLimit = " LIMIT " + getPara("iDisplayStart") + ", "                    + getPara("iDisplayLength");        }        // 获取总条数        String totalWhere = "";        String sql = "select count(1) total from user_login ";        Record rec = Db.findFirst(sql + totalWhere);        logger.debug("total records:" + rec.getLong("total"));        // 获取当前页的数据        List<Record> orders = Db.find("select * from user_login");        Map orderMap = new HashMap();        orderMap.put("sEcho", pageIndex);        orderMap.put("iTotalRecords", rec.getLong("total"));        orderMap.put("iTotalDisplayRecords", rec.getLong("total"));        orderMap.put("aaData", orders);        renderJson(orderMap);    }    public void SearchTransfer() {        String sLimit = "";        String pageIndex = getPara("sEcho");        if (getPara("iDisplayStart") != null                && getPara("iDisplayLength") != null) {            sLimit = " LIMIT " + getPara("iDisplayStart") + ", "                    + getPara("iDisplayLength");        }        String sqlTotal = "select count(1) total from transfer_order where arrival_mode='gateIn'";        Record rec = Db.findFirst(sqlTotal);        logger.debug("total records:" + rec.getLong("total"));        String sql = "select * from transfer_order where STATUS='已入库'";        List<Record> transferOrders = Db.find(sql);        Map transferOrderListMap = new HashMap();        transferOrderListMap.put("sEcho", pageIndex);        transferOrderListMap.put("iTotalRecords", rec.getLong("total"));        transferOrderListMap.put("iTotalDisplayRecords", rec.getLong("total"));        transferOrderListMap.put("aaData", transferOrders);        renderJson(transferOrderListMap);    }    public void deliveryList() {        String sLimit = "";        String pageIndex = getPara("sEcho");        if (getPara("iDisplayStart") != null                && getPara("iDisplayLength") != null) {            sLimit = " LIMIT " + getPara("iDisplayStart") + ", "                    + getPara("iDisplayLength");        }        String sqlTotal = "select count(1) total from delivery_order";        Record rec = Db.findFirst(sqlTotal);        logger.debug("total records:" + rec.getLong("total"));        String sql = "select d.*,c.company_name as customer,c2.company_name as c2,to.order_no as transfer_order_no from delivery_order d "                + "left join party p on d.customer_id = p.id left join contact c on p.contact_id = c.id "                + "left join party p2 on d.sp_id = p2.id join contact c2 on p2.contact_id = c2.id "                + "left join transfer_order to on d.transfer_order_id = to.id";        List<Record> transferOrders = Db.find(sql);        Map transferOrderListMap = new HashMap();        transferOrderListMap.put("sEcho", pageIndex);        transferOrderListMap.put("iTotalRecords", rec.getLong("total"));        transferOrderListMap.put("iTotalDisplayRecords", rec.getLong("total"));        transferOrderListMap.put("aaData", transferOrders);        renderJson(transferOrderListMap);    }    public void cancel() {        String id = getPara();        System.out.println(id);        DeliveryOrder.dao.findById(id).set("Status", "取消").update();        renderJson("{\"success\":true}");    }    // 查找供应商    public void searchSp() {        String input = getPara("input");        List<Record> locationList = Collections.EMPTY_LIST;        if (input.trim().length() > 0) {            locationList = Db                    .find("select *,p.id as pid from contact c,party p where p.contact_id= c.id and p.party_type ='SERVICE_PROVIDER' and (c.company_name like '%"                            + input                            + "%' or c.contact_person like '%"                            + input                            + "%' or c.email like '%"                            + input                            + "%' or c.mobile like '%"                            + input                            + "%' or c.phone like '%"                            + input                            + "%' or c.address like '%"                            + input                            + "%' or c.postal_code like '%"                            + input                            + "%') limit 0,10");        }        renderJson(locationList);    }    public void orderList() {        String id = getPara("trandferOrderId");        String ser = getPara("ser");        String sLimit = "";        String pageIndex = getPara("sEcho");        if (getPara("iDisplayStart") != null                && getPara("iDisplayLength") != null) {            sLimit = " LIMIT " + getPara("iDisplayStart") + ", "                    + getPara("iDisplayLength");        }        String sqlTotal = "";        if (id != null && ser != null && ser != "") {            sqlTotal = "select count(1) total from delivery_order_item where order_id ='"                    + id + "' and SERIAL_NO ='" + ser + "'";        } else {            sqlTotal = "select count(1) total from delivery_order_item where order_id ='"                    + id + "'";        }        Record rec = Db.findFirst(sqlTotal);        logger.debug("total records:" + rec.getLong("total"));        String sql = "";        if (id != null && ser != null && ser != "") {            sql = "select * from delivery_order_item where order_id ='" + id                    + "' and SERIAL_NO ='" + ser + "'";        } else {            sql = "select * from delivery_order_item where order_id ='" + id                    + "'";        }        List<Record> transferOrders = Db.find(sql);        Map transferOrderListMap = new HashMap();        transferOrderListMap.put("sEcho", pageIndex);        transferOrderListMap.put("iTotalRecords", rec.getLong("total"));        transferOrderListMap.put("iTotalDisplayRecords", rec.getLong("total"));        transferOrderListMap.put("aaData", transferOrders);        renderJson(transferOrderListMap);    }    public void deliverySave() {        String deliveryid = getPara("delivery_id");        DeliveryOrder deliveryOrder = null;        String notifyId = getPara("notify_id");        String itemId = getPara("item_id");        System.out.println(itemId);        String name = (String) currentUser.getPrincipal();        List<UserLogin> users = UserLogin.dao                .find("select * from user_login where user_name='" + name + "'");        Date createDate = Calendar.getInstance().getTime();        Party party = new Party();        Contact contact = new Contact();        deliveryOrder = new DeliveryOrder();        if (notifyId == null || notifyId.equals("")) {            contact.set("company_name", getPara("notify_company_name"))                    .set("contact_person", getPara("notify_contact_person"))                    .set("address", getPara("notify_address"))                    .set("phone", getPara("notify_phone"));            contact.save();            party.set("contact_id", contact.get("id"))                    .set("party_type", "NOTIFY_PARTY")                    .set("create_date", createDate)                    .set("creator", users.get(0).get("id"));            party.save();        } else {            contact.set("id", getPara("contact_id"))                    .set("company_name", getPara("notify_company_name"))                    .set("contact_person", getPara("notify_contact_person"))                    .set("address", getPara("notify_address"))                    .set("phone", getPara("notify_phone")).update();        }        if (deliveryid == null || "".equals(deliveryid)) {            DeliveryOrder order = DeliveryOrder.dao                    .findFirst("select * from delivery_order order by order_no desc limit 0,1");            String num = order.get("order_no");            String order_no = String.valueOf((Long.parseLong(num) + 1));            deliveryOrder.set("Order_no", order_no)                    .set("Transfer_order_id", getPara("tranferid"))                    .set("Customer_id", getPara("customer_id"))                    .set("Sp_id", getPara("cid"))                    .set("Notify_party_id", party.get("id"))                    .set("CREATE_STAMP", createDate).set("Status", "新建");            deliveryOrder.save();            if (!"".equals(itemId)) {                DeliveryOrderItem.dao.findById(itemId)                        .set("delivery_id", deliveryOrder.get("id")).update();            }            saveDeliveryOrderMilestone(deliveryOrder);        } else {            deliveryOrder.set("Sp_id", getPara("cid"))                    .set("Notify_party_id", getPara("notify_id"))                    .set("Customer_id", getPara("customer_id"))                    .set("id", deliveryid);            deliveryOrder.update();        }        renderJson(deliveryOrder);    }    // 保存运输里程碑    private void saveDeliveryOrderMilestone(DeliveryOrder transferOrder) {        DeliveryOrderMilestone deliveryOrderMilestone = new DeliveryOrderMilestone();        deliveryOrderMilestone.set("status", "新建");        String name = (String) currentUser.getPrincipal();        List<UserLogin> users = UserLogin.dao                .find("select * from user_login where user_name='" + name + "'");        deliveryOrderMilestone.set("create_by", users.get(0).get("id"));        deliveryOrderMilestone.set("location", "");        java.util.Date utilDate = new java.util.Date();        java.sql.Timestamp sqlDate = new java.sql.Timestamp(utilDate.getTime());        deliveryOrderMilestone.set("create_stamp", sqlDate);        deliveryOrderMilestone.set("delivery_id", transferOrder.get("id"));        deliveryOrderMilestone.save();    }    // 运输单ATM序列号    public void serialNo() {        String id = getPara("id");        System.out.println(id);        List<Record> transferOrders = Db                .find("SELECT serial_no  FROM TRANSFER_ORDER_ITEM_DETAIL where item_name = 'ATM' and ORDER_ID  = "                        + id);        renderJson(transferOrders);    }    public void serialNo2() {        String id = getPara("id");        System.out.println(id);        List<Record> transferOrders = Db                .find("SELECT serial_no  FROM TRANSFER_ORDER_ITEM_DETAIL where item_name = 'ATM' and ORDER_ID  = "                        + id);        renderJson(transferOrders);    }    // 发车确认    public void departureConfirmation() {        Long delivery_id = Long.parseLong(getPara("deliveryid"));        System.out.println(delivery_id);        DeliveryOrder deliveryOrder = DeliveryOrder.dao.findById(delivery_id);        deliveryOrder.set("status", "配送在途");        deliveryOrder.update();        Map<String, Object> map = new HashMap<String, Object>();        DeliveryOrderMilestone deliveryOrderMilestone = new DeliveryOrderMilestone();        deliveryOrderMilestone.set("status", "已发车");        String name = (String) currentUser.getPrincipal();        List<UserLogin> users = UserLogin.dao                .find("select * from user_login where user_name='" + name + "'");        deliveryOrderMilestone.set("create_by", users.get(0).get("id"));        deliveryOrderMilestone.set("location", "");        java.util.Date utilDate = new java.util.Date();        java.sql.Timestamp sqlDate = new java.sql.Timestamp(utilDate.getTime());        deliveryOrderMilestone.set("create_stamp", sqlDate);        deliveryOrderMilestone.set("order_id", getPara("order_id"));        deliveryOrderMilestone.save();        map.put("transferOrderMilestone", deliveryOrderMilestone);        UserLogin userLogin = UserLogin.dao.findById(deliveryOrderMilestone                .get("create_by"));        String username = userLogin.get("user_name");        map.put("username", username);        renderJson(map);    }}