package controllers.yh;import interceptor.SetAttrLoginUserInterceptor;import java.math.BigInteger;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import models.Office;import models.UserLogin;import models.UserOffice;import org.apache.shiro.SecurityUtils;import org.apache.shiro.authz.annotation.Logical;import org.apache.shiro.authz.annotation.RequiresAuthentication;import org.apache.shiro.authz.annotation.RequiresPermissions;import org.apache.shiro.subject.Subject;import com.jfinal.aop.Before;import com.jfinal.core.Controller;import com.jfinal.log.Logger;import com.jfinal.plugin.activerecord.Db;import com.jfinal.plugin.activerecord.Record;import controllers.yh.util.CompareStrList;import controllers.yh.util.PermissionConstant;@RequiresAuthentication@Before(SetAttrLoginUserInterceptor.class)public class LoginUserController extends Controller {    private Logger logger = Logger.getLogger(LoginUserController.class);    // in config route已经将路径默认设置为/yh    // me.add("/yh", controllers.yh.AppController.class, "/yh");    static Subject currentUser = SecurityUtils.getSubject();        public static Long getLoginUserId(Controller controller) {        currentUser = SecurityUtils.getSubject();        if (!currentUser.isAuthenticated()) {            controller.redirect("/login");            UserLogin l = UserLogin.dao.findFirst("select * from user_login where user_name='"+currentUser.getPrincipal().toString()+"'");            return l.getLong("id");        }        return -1L;    }    @RequiresPermissions(value = {PermissionConstant.PERMSSION_U_LIST})    public void index() {        render("/yh/profile/loginUser/loginUser.html");    }    // show增加用户页面    @RequiresPermissions(value = {PermissionConstant.PERMSSION_U_CREATE})    public void addUser() {        render("/yh/profile/loginUser/addUser.html");    }    // show编辑用户    @RequiresPermissions(value = {PermissionConstant.PERMSSION_U_UPDATE})    public void edit() {        //String username = currentUser.getPrincipal().toString();        String id = getPara();        if (id != null) {            //index();            UserLogin user = UserLogin.dao.findById(id);            setAttr("lu", user);            render("/yh/profile/loginUser/addUser.html");        }        /*if (username != null && id == null) {            //index();            UserLogin user = UserLogin.dao.findFirst(                    "select * from user_login where user_name=?", username);            setAttr("ul", user);            render("/yh/profile/loginUser/EditUser.html");        }*/    }    // 添加登陆用户    @RequiresPermissions(value = {PermissionConstant.PERMSSION_U_CREATE, PermissionConstant.PERMSSION_U_UPDATE}, logical=Logical.OR)    public void saveUser() {            	UserLogin user=null;    	String username=getPara("username");        String id = getPara("userId");        String name = getPara("name");        /*String offices =getPara("officeSelect");*/        /*String is_main =getPara("isMain_radio");*/        /*String officeId = getPara("officeSelect");*/                if (id != "") {            user = UserLogin.dao.findById(id);        }else{        	user = new UserLogin();        	user.set("user_name", username);        }        user.set("password", getPara("password"));        user.set("password_hint", getPara("pw_hint"));        user.set("c_name", name);                   /*if(is_main != null && !"".equals(is_main)){        	user.set("office_id", is_main);        }*/        if (id != "") {            logger.debug("update....");            user.update();        } else {            user.save();        }        index();    }    // 删除用户    @RequiresPermissions(value = {PermissionConstant.PERMSSION_U_DELETE})    public void del() {        String id = getPara();        if (id != null) {            UserLogin l = UserLogin.dao.findById(id);            l.delete();        }        render("/yh/profile/loginUser/loginUser.html");    }    // 列出用户信息    @RequiresPermissions(value = {PermissionConstant.PERMSSION_U_LIST})    public void listUser() {        String sLimit = "";        String pageIndex = getPara("sEcho");        if (getPara("iDisplayStart") != null                && getPara("iDisplayLength") != null) {            sLimit = " LIMIT " + getPara("iDisplayStart") + ", "                    + getPara("iDisplayLength");        }        // 获取总条数        String totalWhere = "";        String sql = "select count(1) total from user_login ";        Record rec = Db.findFirst(sql + totalWhere);        logger.debug("total records:" + rec.getLong("total"));        // 获取当前页的数据        List<Record> orders = Db                .find("select id,user_name,password_hint,c_name from user_login");        Map orderMap = new HashMap();        orderMap.put("sEcho", pageIndex);        orderMap.put("iTotalRecords", rec.getLong("total"));        orderMap.put("iTotalDisplayRecords", rec.getLong("total"));        orderMap.put("aaData", orders);        renderJson(orderMap);    }    public void officeList(){    	String id = getPara("userId");    	if(id==null || "".equals(id)){			 Map<String, List> map = new HashMap<String, List>();			 map.put("userOffice", null);			 renderJson(map);             return;    	}    	UserLogin user= UserLogin.dao.findById(id);    	List<UserOffice> ulist = UserOffice.dao.find("select uo.user_name,uo.office_id,o.office_name from user_office uo left join office o on o.id = uo.office_id"    			+ "  where user_name =?",user.get("user_name"));		 Map<String, List> map = new HashMap<String, List>();		 map.put("userOffice", ulist);        renderJson(map);    	    }    public void saveOffice(){    	String id = getPara("id");    	String ids = getPara("officeIds");    	UserLogin user= UserLogin.dao.findById(id);    	    	if(ids!=null&&!"".equals(ids)){    		List<UserOffice> ulist = UserOffice.dao.find("select office_id from user_office where user_name=?",user.get("name"));    		List<Object> o_id_list= new ArrayList<Object>();    		    		for (UserOffice userOffice : ulist) {				o_id_list.add(userOffice.get("office_id"));			}    		    		String[] officeIds = ids.split(",");    		CompareStrList compare= new CompareStrList();    		List objList = compare.compare(o_id_list, officeIds);    		o_id_list= (List<Object>) objList.get(0);    		for (Object object : objList) {    			    			if(object!=null&&!"".equals(object)){    				UserOffice user_office=UserOffice.dao.findFirst("select * from user_office where user_name=? and office_id=?",user.get("user_name"),object);    				user_office.delete();    			}    			    		}    		List<Object> addList=(List<Object>) objList.get(1);    		for (Object object : addList) {    			UserOffice user_office = new UserOffice();				user_office.set("user_name", user.get("user_name"));				user_office.set("office_id",object);				user_office.save();			}    		    	}    	renderJson(user);    }    public void searchAllOffice() {		List<Office> offices = Office.dao.find("select id,office_name from office");		renderJson(offices);	}}