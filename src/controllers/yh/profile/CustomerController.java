package controllers.yh.profile;import java.util.Calendar;import java.util.Date;import java.util.HashMap;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;import java.util.Map.Entry;import java.util.Set;import models.Party;import models.PartyAttribute;import com.jfinal.core.Controller;import com.jfinal.log.Logger;import com.jfinal.plugin.activerecord.Db;import com.jfinal.plugin.activerecord.Record;public class CustomerController extends Controller {    private Logger logger = Logger.getLogger(CustomerController.class);    // in config route已经将路径默认设置为/yh    // me.add("/yh", controllers.yh.AppController.class, "/yh");    public void index() {        render("profile/customer/CustomerList.html");    }    public void list() {        /*         * Paging         */        String sLimit = "";        String pageIndex = getPara("sEcho");        if (getPara("iDisplayStart") != null && getPara("iDisplayLength") != null) {            sLimit = " LIMIT " + getPara("iDisplayStart") + ", " + getPara("iDisplayLength");        }        String sqlTotal = "select count(1) total from party ";        Record rec = Db.findFirst(sqlTotal);        logger.debug("total records:" + rec.getLong("total"));        String sql = "select * from party where party_type='CUSTOMER' order by create_date desc ";        List<Record> orders = Db.find(sql);        for (Record record : orders) {            long partyId = record.getLong("id");            List<Record> partyAttrs = Db.find("select * from party_attribute where party_id=?", partyId);            for (Record attr : partyAttrs) {                if ("name".equals(attr.getStr("attr_name"))) {                    record.set("name", attr.getStr("attr_value"));                }                if ("address".equals(attr.getStr("attr_name"))) {                    record.set("address", attr.getStr("attr_value"));                }                if ("mobile".equals(attr.getStr("attr_name"))) {                    record.set("mobile", attr.getStr("attr_value"));                }                if ("company_name".equals(attr.getStr("attr_name"))) {                    record.set("company_name", attr.getStr("attr_value"));                }            }        }        Map customerListMap = new HashMap();        customerListMap.put("sEcho", pageIndex);        customerListMap.put("iTotalRecords", rec.getLong("total"));        customerListMap.put("iTotalDisplayRecords", rec.getLong("total"));        customerListMap.put("aaData", orders);        renderJson(customerListMap);    }    public void add() {        setAttr("saveOK", false);        render("profile/customer/CustomerEdit.html");    }    public void edit() {        long id = getParaToLong();        Party party = Party.dao.findById(id);        setAttr("party", party);        List<PartyAttribute> paList = PartyAttribute.dao.find("select * from party_attribute where party_id=?", id);        for (PartyAttribute attr : paList) {            if ("company_name".equals(attr.getStr("attr_name"))) {                setAttr("company_name", attr.getStr("attr_value"));            }            if ("name".equals(attr.getStr("attr_name"))) {                setAttr("name", attr.getStr("attr_value"));            }            if ("address".equals(attr.getStr("attr_name"))) {                setAttr("address", attr.getStr("attr_value"));            }            if ("phone".equals(attr.getStr("attr_name"))) {                setAttr("phone", attr.getStr("attr_value"));            }            if ("email".equals(attr.getStr("attr_name"))) {                setAttr("email", attr.getStr("attr_value"));            }            if ("post_code".equals(attr.getStr("attr_name"))) {                setAttr("post_code", attr.getStr("attr_value"));            }        }        render("profile/customer/CustomerEdit.html");    }    public void save() {        String id = getPara("party_id");        Party party = null;        Date createDate = Calendar.getInstance().getTime();        if (!id.equals("")) {            Db.update("delete from party_attribute where party_id=?", id);            party = Party.dao.findById(id);            party.set("last_update_date", createDate);        } else {            party = new Party();            party.set("party_type", Party.PARTY_TYPE_CUSTOMER);            party.set("creator", "test");            party.set("create_date", createDate);            party.save();        }        savePartyAttr(party.getLong("id"));        setAttr("saveOK", true);        redirect("/yh/customer/edit/" + party.getLong("id"));    }    private void savePartyAttr(long id) {        LinkedHashMap<String, String> map = new LinkedHashMap<String, String>();        map.put("company_name", getPara("company_name"));        map.put("address", getPara("address"));        map.put("name", getPara("name"));        map.put("phone", getPara("phone"));        map.put("email", getPara("email"));        map.put("post_code", getPara("post_code"));        Set<Entry<String, String>> paSet = map.entrySet();        for (Entry<String, String> entry : paSet) {            PartyAttribute pa = new PartyAttribute();            pa.set("party_id", id).set("attr_name", entry.getKey()).set("attr_value", entry.getValue()).save();        }    }}