package controllers.yh.pickup;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import models.DepartOrder;import models.DepartTransferOrder;import models.Location;import models.Party;import models.TransferOrder;import models.TransferOrderMilestone;import models.UserLogin;import models.yh.profile.Contact;import org.apache.shiro.SecurityUtils;import org.apache.shiro.subject.Subject;import com.jfinal.core.Controller;import com.jfinal.log.Logger;import com.jfinal.plugin.activerecord.Db;import com.jfinal.plugin.activerecord.Record;import controllers.yh.LoginUserController;public class PickupOrderController extends Controller {    private Logger logger = Logger.getLogger(PickupOrderController.class);        Subject currentUser = SecurityUtils.getSubject();    private boolean isAuthenticated() {        if (!currentUser.isAuthenticated()) {            redirect("/yh/login");            return false;        }        setAttr("userId", currentUser.getPrincipal());        return true;    }    public void index() {        if (!isAuthenticated())            return;        render("/yh/pickup/pickupOrderList.html");    }    public void add() {        if (LoginUserController.isAuthenticated(this))            render("/yh/pickup/pickupOrderSearchTransfer.html");    }    public void createPickupOrder() {    	String list = this.getPara("localArr");		setAttr("localArr", list);    	String order_no = null;        setAttr("saveOK", false);        TransferOrder transferOrder = new TransferOrder();        String name = (String) currentUser.getPrincipal();        List<UserLogin> users = UserLogin.dao.find("select * from user_login where user_name='" + name + "'");        setAttr("create_by", users.get(0).get("id"));        DepartOrder order = DepartOrder.dao.findFirst("select * from depart_order order by depart_no desc limit 0,1");        if (order != null) {            String num = order.get("depart_no");            String str = num.substring(2, num.length());            System.out.println(str);            Long oldTime = Long.parseLong(str);            SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");            String format = sdf.format(new Date());            String time = format + "00001";            Long newTime = Long.parseLong(time);            if (oldTime >= newTime) {                order_no = String.valueOf((oldTime + 1));            } else {                order_no = String.valueOf(newTime);            }            setAttr("order_no", "PC" + order_no);        } else {            SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");            String format = sdf.format(new Date());            order_no = format + "00001";            setAttr("order_no", "PC" + order_no);        }        UserLogin userLogin = UserLogin.dao.findById(users.get(0).get("id"));        setAttr("userLogin", userLogin);        setAttr("status", "新建");        setAttr("saveOK", false);        render("/yh/pickup/editPickupOrder.html");    }    // 创建 结构 行为    public void pickuplist() {        String sLimit = "";        String pageIndex = getPara("sEcho");        if (getPara("iDisplayStart") != null                && getPara("iDisplayLength") != null) {            sLimit = " LIMIT " + getPara("iDisplayStart") + ", "                    + getPara("iDisplayLength");        }        String sqlTotal = "select count(1) total FROM DEPART_ORDER do "				+ " left join party p on do.driver_id = p.id and p.party_type = '"+Party.PARTY_TYPE_DRIVER+"'"				+ " left join contact c on p.contact_id = c.id "				+ " where combine_type = '"+DepartOrder.COMBINE_TYPE_PICKUP+"'";		Record rec = Db.findFirst(sqlTotal);		logger.debug("total records:" + rec.getLong("total"));		String sql = "SELECT do.*,c.contact_person,c.phone, (select group_concat(dt.TRANSFER_ORDER_NO separator '\r\n')  FROM DEPART_TRANSFER dt where DEPART_ID = do.id)  as TRANSFER_ORDER_NO  FROM DEPART_ORDER do "				+ " left join party p on do.driver_id = p.id and p.party_type = '"+Party.PARTY_TYPE_DRIVER+"'"				+ " left join contact c on p.contact_id = c.id where combine_type = '"+DepartOrder.COMBINE_TYPE_PICKUP+"'";		List<Record> warehouses = Db.find(sql);				Map map = new HashMap();		map.put("sEcho", pageIndex);		map.put("iTotalRecords", rec.getLong("total"));		map.put("iTotalDisplayRecords", rec.getLong("total"));		map.put("aaData", warehouses);		renderJson(map);    }    public void createList() {        Map transferOrderListMap = null;    	String orderNo = getPara("orderNo");        String status = getPara("status");        String address = getPara("address");        String customer = getPara("customer");        String routeFrom = getPara("routeFrom");        String routeTo = getPara("routeTo");        String beginTime = getPara("beginTime");        String endTime = getPara("endTime");                String sLimit = "";        if (orderNo == null && status == null && address == null && customer == null && routeFrom == null && routeTo == null && beginTime == null && endTime == null) {	        String pageIndex = getPara("sEcho");	        if (getPara("iDisplayStart") != null	                && getPara("iDisplayLength") != null) {	            sLimit = " LIMIT " + getPara("iDisplayStart") + ", "	                    + getPara("iDisplayLength");	        }		        String sqlTotal = "select count(1) total  from transfer_order tor "					+" left join party p on tor.customer_id = p.id "					+" left join contact c on p.contact_id = c.id "					+" left join location l1 on tor.route_from = l1.code "					+" left join location l2 on tor.route_to = l2.code"					+" where tor.status not in ('已入库','已签收') and arrival_mode !='delivery' and isnull(tor.assign_status, '') !='"+TransferOrder.ASSIGN_STATUS_ALL+"'";	        Record rec = Db.findFirst(sqlTotal);	        logger.debug("total records:" + rec.getLong("total"));	                                                                                               	        String sql = "select tor.id,tor.order_no,tor.cargo_nature,"					+" (select sum(tori.weight) from transfer_order_item tori where tori.order_id = tor.id) as total_weight,"  					+" (select sum(tori.volume) from transfer_order_item tori where tori.order_id = tor.id) as total_volumn," 					+" (select sum(tori.amount) from transfer_order_item tori where tori.order_id = tor.id) as total_amount," 					+" tor.address,tor.pickup_mode,tor.status,c.company_name cname,"					+" l1.name route_from,l2.name route_to,tor.CREATE_STAMP,tor.assign_status from transfer_order tor "					+" left join party p on tor.customer_id = p.id "					+" left join contact c on p.contact_id = c.id "					+" left join location l1 on tor.route_from = l1.code "					+" left join location l2 on tor.route_to = l2.code"					+" where tor.status not in ('已入库','已签收') and arrival_mode !='delivery' and isnull(tor.assign_status, '') !='"+TransferOrder.ASSIGN_STATUS_ALL+"'"					+" order by tor.CREATE_STAMP desc";		        List<Record> transferOrders = Db.find(sql);		        transferOrderListMap = new HashMap();	        transferOrderListMap.put("sEcho", pageIndex);	        transferOrderListMap.put("iTotalRecords", rec.getLong("total"));	        transferOrderListMap.put("iTotalDisplayRecords", rec.getLong("total"));		        transferOrderListMap.put("aaData", transferOrders);        }else if ("".equals(routeFrom) && "".equals(routeTo)) {        	if (beginTime == null || "".equals(beginTime)) {                beginTime = "1-1-1";            }            if (endTime == null || "".equals(endTime)) {                endTime = "9999-12-31";            }	        String pageIndex = getPara("sEcho");	        if (getPara("iDisplayStart") != null	                && getPara("iDisplayLength") != null) {	            sLimit = " LIMIT " + getPara("iDisplayStart") + ", "	                    + getPara("iDisplayLength");	        }		        String sqlTotal = "select count(1) total from transfer_order tor "					+" left join party p on tor.customer_id = p.id "					+" left join contact c on p.contact_id = c.id "					+" left join location l1 on tor.route_from = l1.code "					+" left join location l2 on tor.route_to = l2.code "					+" where tor.status not in ('已入库','已签收') and arrival_mode !='delivery' and isnull(tor.assign_status, '') !='"+TransferOrder.ASSIGN_STATUS_ALL+"'"					+" and l1.name like '%"+routeFrom+"%' and l2.name like '%"+routeTo+"%' and tor.order_no like '%" + orderNo + "%' and tor.status like '%"                    + status + "%' and tor.address like '%" + address + "%' and c.COMPANY_NAME like '%" + customer                    +"%' and create_stamp between '" + beginTime + "' and '" + endTime + "'";	        Record rec = Db.findFirst(sqlTotal);	        logger.debug("total records:" + rec.getLong("total"));	                                                                                               	        String sql = "select tor.id,tor.order_no,tor.cargo_nature,"					+" (select sum(tori.weight) from transfer_order_item tori where tori.order_id = tor.id) as total_weight,"  					+" (select sum(tori.volume) from transfer_order_item tori where tori.order_id = tor.id) as total_volumn," 					+" (select sum(tori.amount) from transfer_order_item tori where tori.order_id = tor.id) as total_amount," 					+" tor.address,tor.pickup_mode,tor.status,c.company_name cname,"					+" l1.name route_from,l2.name route_to,tor.CREATE_STAMP,tor.assign_status from transfer_order tor "					+" left join party p on tor.customer_id = p.id "					+" left join contact c on p.contact_id = c.id "					+" left join location l1 on tor.route_from = l1.code "					+" left join location l2 on tor.route_to = l2.code  "					+" where tor.status not in ('已入库','已签收') and arrival_mode !='delivery' and isnull(tor.assign_status, '') !='"+TransferOrder.ASSIGN_STATUS_ALL+"'"					+" and l1.name like '%"+routeFrom+"%' and l2.name like '%"+routeTo+"%' and tor.order_no like '%" + orderNo + "%' and tor.status like '%"                    + status + "%' and tor.address like '%" + address + "%' and c.COMPANY_NAME like '%" + customer                    +"%' and create_stamp between '" + beginTime + "' and '" + endTime + "'"					+" order by tor.CREATE_STAMP desc";		        List<Record> transferOrders = Db.find(sql);		        transferOrderListMap = new HashMap();	        transferOrderListMap.put("sEcho", pageIndex);	        transferOrderListMap.put("iTotalRecords", rec.getLong("total"));	        transferOrderListMap.put("iTotalDisplayRecords", rec.getLong("total"));		        transferOrderListMap.put("aaData", transferOrders);        }else{        	if (beginTime == null || "".equals(beginTime)) {                beginTime = "1-1-1";            }            if (endTime == null || "".equals(endTime)) {                endTime = "9999-12-31";            }        	String pageIndex = getPara("sEcho");	        if (getPara("iDisplayStart") != null	                && getPara("iDisplayLength") != null) {	            sLimit = " LIMIT " + getPara("iDisplayStart") + ", "	                    + getPara("iDisplayLength");	        }		        String sqlTotal = "select count(1) total from transfer_order tor "	        		+" left join party p on tor.customer_id = p.id "					+" left join contact c on p.contact_id = c.id "					+" left join location l1 on tor.route_from = l1.code "					+" left join location l2 on tor.route_to = l2.code  "					+" where tor.status not in ('已入库','已签收') and arrival_mode !='delivery' and isnull(tor.assign_status, '') !='"+TransferOrder.ASSIGN_STATUS_ALL+"'"					+" and l1.name like '%"+routeFrom+"%' and l2.name like '%"+routeTo+"%' and tor.order_no like '%" + orderNo + "%' and tor.status like '%"                    + status + "%' and tor.address like '%" + address + "%' and c.COMPANY_NAME like '%" + customer                    + "%' and create_stamp between '" + beginTime + "' and '" + endTime + "'";	        Record rec = Db.findFirst(sqlTotal);	        logger.debug("total records:" + rec.getLong("total"));	                                                                                               	        String sql = "select tor.id,tor.order_no,tor.cargo_nature,"					+" (select sum(tori.weight) from transfer_order_item tori where tori.order_id = tor.id) as total_weight,"  					+" (select sum(tori.volume) from transfer_order_item tori where tori.order_id = tor.id) as total_volumn," 					+" (select sum(tori.amount) from transfer_order_item tori where tori.order_id = tor.id) as total_amount," 					+" tor.address,tor.pickup_mode,tor.status,c.company_name cname,"					+" (SELECT name FROM LOCATION where CODE = tor.route_from) route_from,(SELECT name FROM LOCATION where CODE = tor.route_to) route_to,tor.CREATE_STAMP,tor.assign_status from transfer_order tor "					+" left join party p on tor.customer_id = p.id "					+" left join contact c on p.contact_id = c.id "					+" left join location l1 on tor.route_from = l1.code "					+" left join location l2 on tor.route_to = l2.code  "					+" where tor.status not in ('已入库','已签收') and arrival_mode !='delivery' and isnull(tor.assign_status, '') !='"+TransferOrder.ASSIGN_STATUS_ALL+"'"					+" and l1.name like '%"+routeFrom+"%' and l2.name like '%"+routeTo+"%' and tor.order_no like '%" + orderNo + "%' and tor.status like '%"                    + status + "%' and tor.address like '%" + address + "%' and c.COMPANY_NAME like '%" + customer                    + "%' and create_stamp between '" + beginTime + "' and '" + endTime + "'"					+" order by tor.CREATE_STAMP desc";		        List<Record> transferOrders = Db.find(sql);		        transferOrderListMap = new HashMap();	        transferOrderListMap.put("sEcho", pageIndex);	        transferOrderListMap.put("iTotalRecords", rec.getLong("total"));	        transferOrderListMap.put("iTotalDisplayRecords", rec.getLong("total"));		        transferOrderListMap.put("aaData", transferOrders);        }        renderJson(transferOrderListMap);    }        // 初始化货品数据 	public void getInitPickupOrderItems() { 		String order_id = getPara("localArr");//运输单id 		String tr_item=getPara("tr_item");//货品id 		String item_detail=getPara("item_detail");//单品id 		 		String sLimit = ""; 		String pageIndex = getPara("sEcho"); 		if (getPara("iDisplayStart") != null && getPara("iDisplayLength") != null) { 			sLimit = " LIMIT " + getPara("iDisplayStart") + ", " + getPara("iDisplayLength"); 		} 		String sqlTotal = "select count(1) total from TRANSFER_ORDER_ITEM tof" 				+ " left join TRANSFER_ORDER  or  on tof.ORDER_ID =or.id " 				+ " left join CONTACT c on c.id in (select contact_id from party p where or.customer_id=p.id)" 				+ " where tof.ORDER_ID in(" + order_id + ")"; 		Record rec = Db.findFirst(sqlTotal); 		logger.debug("total records:" + rec.getLong("total")); 		String sql = "SELECT tof.* ,or.ORDER_NO as order_no,or.id as tr_order_id,c.COMPANY_NAME as customer  FROM TRANSFER_ORDER_ITEM tof" 				+ " left join TRANSFER_ORDER  or  on tof.ORDER_ID =or.id " 				+ "left join CONTACT c on c.id in (select contact_id from party p where or.customer_id=p.id)" 				+ " where tof.ORDER_ID in(" + order_id + ")  order by c.id" + sLimit; 		List<Record> departOrderitem = Db.find(sql);	 		Map Map = new HashMap(); 		Map.put("sEcho", pageIndex); 		Map.put("iTotalRecords", rec.getLong("total")); 		Map.put("iTotalDisplayRecords", rec.getLong("total")); 		Map.put("aaData", departOrderitem); 		renderJson(Map); 	} 	// 保存拼车单 	public void savePickupOrder(){ 		DepartOrder pickupOrder = null; 		String pickId = getPara("pickupId"); 		Party party = null; 		if(pickId == null || "".equals(pickId)){ 			pickupOrder = new DepartOrder(); 			pickupOrder.set("depart_no", getPara("order_no")); 			pickupOrder.set("status", getPara("status")); 			pickupOrder.set("create_by", getPara("create_by")); 			pickupOrder.set("car_no", getPara("car_no")); 			pickupOrder.set("car_type", getPara("car_type")); 			pickupOrder.set("car_size", getPara("car_size")); 			pickupOrder.set("car_follow_name", getPara("car_follow_name")); 			pickupOrder.set("car_follow_phone", getPara("car_follow_phone")); 			pickupOrder.set("route_from", getPara("route_from")); 			pickupOrder.set("route_to", getPara("route_to")); 			pickupOrder.set("remark", getPara("remark")); 			pickupOrder.set("combine_type", DepartOrder.COMBINE_TYPE_PICKUP); 			java.util.Date utilDate = new java.util.Date(); 	        java.sql.Timestamp sqlDate = new java.sql.Timestamp(utilDate.getTime()); 	        pickupOrder.set("create_stamp", sqlDate); 			String driveId = getPara("driver_id"); 			if(driveId == null || "".equals(driveId)){ 				party = saveDriver(); 			}else{ 				party = updateDriver(driveId); 			} 	    	pickupOrder.set("driver_id", party.get("id")); 			pickupOrder.save(); 			saveDepartTransfer(pickupOrder, getPara("orderid")); 			savePickupOrderMilestone(pickupOrder); 		}else{ 			pickupOrder = DepartOrder.dao.findById(pickId); 			pickupOrder.set("depart_no", getPara("order_no")); 			pickupOrder.set("status", getPara("status")); 			pickupOrder.set("create_by", getPara("create_by")); 			pickupOrder.set("car_no", getPara("car_no")); 			pickupOrder.set("car_type", getPara("car_type")); 			pickupOrder.set("car_size", getPara("car_size")); 			pickupOrder.set("car_follow_name", getPara("car_follow_name")); 			pickupOrder.set("car_follow_phone", getPara("car_follow_phone")); 			pickupOrder.set("route_from", getPara("route_from")); 			pickupOrder.set("route_to", getPara("route_to")); 			pickupOrder.set("remark", getPara("remark")); 			pickupOrder.set("combine_type", DepartOrder.COMBINE_TYPE_PICKUP); 			java.util.Date utilDate = new java.util.Date(); 	        java.sql.Timestamp sqlDate = new java.sql.Timestamp(utilDate.getTime()); 	        pickupOrder.set("create_stamp", sqlDate); 			String driveId = getPara("driver_id"); 			if(driveId == null || "".equals(driveId)){ 				party = saveDriver(); 			}else{ 				party = updateDriver(driveId); 			} 	    	pickupOrder.set("driver_id", party.get("id")); 			pickupOrder.update(); 		} 		renderJson(pickupOrder); 	} 	private void saveDepartTransfer(DepartOrder pickupOrder, String param) { 		DepartTransferOrder departTransferOrder = null; 		String[] params = param.split(","); 		for(int i = 0; i < params.length; i++){ 			departTransferOrder = new DepartTransferOrder();	 		departTransferOrder.set("depart_id", pickupOrder.get("id"));	 		departTransferOrder.set("order_id", params[i]);	 		TransferOrder transferOrder = TransferOrder.dao.findById(params[i]);	 		transferOrder.set("assign_status", TransferOrder.ASSIGN_STATUS_ALL);	 		transferOrder.update();	 		departTransferOrder.set("transfer_order_no", transferOrder.get("order_no"));	 		departTransferOrder.save(); 		}	}	// 保存司机	private Party saveDriver() {		Contact contact = setContact();		Party party = new Party();    	party.set("contact_id", contact.getLong("id"));    	party.set("create_date", new Date());    	party.set("creator", currentUser.getPrincipal());    	party.set("party_type", Party.PARTY_TYPE_DRIVER);    	party.save();    	return party;	}	// 保存联系人	private Contact setContact() {		Contact contact = new Contact();		contact.set("contact_person", getPara("driver_name"));		contact.set("phone", getPara("driver_phone"));		contact.save();		return contact;	}		// 更新司机	private Party updateDriver(String driveId) {		Party party = Party.dao.findById(driveId);		Contact contact = updateContact(party);		party.set("contact_id", contact.getLong("id"));		party.set("create_date", new Date());		party.set("creator", currentUser.getPrincipal());		party.set("party_type", Party.PARTY_TYPE_DRIVER);		party.update();		return party;	}		// 更新联系人	private Contact updateContact(Party party) {		Contact contact = Contact.dao.findById(party.get("contact_id"));		contact.set("contact_person", getPara("driver_name"));		contact.set("phone", getPara("driver_phone"));		contact.update();		return contact;	}		// 修改拼车单	public void edit(){		DepartOrder pickupOrder = DepartOrder.dao.findById(getPara("id"));		setAttr("pickupOrder", pickupOrder);		Party party = Party.dao.findById(pickupOrder.get("driver_id"));		Contact driver = Contact.dao.findById(party.get("contact_id"));		setAttr("driver", driver);				String routeFrom = pickupOrder.get("route_from");        Location locationFrom = null;        if (routeFrom != null || !"".equals(routeFrom)) {            List<Location> provinces = Location.dao.find("select * from location where pcode ='1'");            Location l = Location.dao.findFirst("SELECT * FROM LOCATION where code = (select pcode from location where CODE = '"                    + routeFrom + "')");            if (provinces.contains(l)) {                locationFrom = Location.dao                        .findFirst("SELECT l.name as CITY,l1.name as PROVINCE,l.code FROM LOCATION l left join lOCATION  l1 on l.pcode =l1.code left join location l2 on l1.pcode = l2.code where l.code = '"                                + routeFrom + "'");            } else {                locationFrom = Location.dao                        .findFirst("SELECT l.name as DISTRICT, l1.name as CITY,l2.name as PROVINCE,l.code FROM LOCATION l left join lOCATION  l1 on l.pcode =l1.code left join location l2 on l1.pcode = l2.code where l.code ='"                                + routeFrom + "'");            }            setAttr("locationFrom", locationFrom);        }        String routeTo = pickupOrder.get("route_to");        Location locationTo = null;        if (routeTo != null || !"".equals(routeTo)) {            List<Location> provinces = Location.dao.find("select * from location where pcode ='1'");            Location l = Location.dao.findFirst("SELECT * FROM LOCATION where code = (select pcode from location where CODE = '" + routeTo                    + "')");            if (provinces.contains(l)) {                locationTo = Location.dao                        .findFirst("SELECT l.name as CITY,l1.name as PROVINCE,l.code FROM LOCATION l left join lOCATION  l1 on l.pcode =l1.code left join location l2 on l1.pcode = l2.code where l.code = '"                                + routeTo + "'");            } else {                locationTo = Location.dao                        .findFirst("SELECT l.name as DISTRICT, l1.name as CITY,l2.name as PROVINCE,l.code FROM LOCATION l left join lOCATION  l1 on l.pcode =l1.code left join location l2 on l1.pcode = l2.code where l.code ='"                                + routeTo + "'");            }            setAttr("locationTo", locationTo);        }        UserLogin userLogin = UserLogin.dao.findById(pickupOrder.get("create_by"));        setAttr("userLogin", userLogin);        render("/yh/pickup/updatePickupOrder.html");    }	// 保存拼车里程碑    private void savePickupOrderMilestone(DepartOrder pickupOrder) {        TransferOrderMilestone transferOrderMilestone = new TransferOrderMilestone();        transferOrderMilestone.set("status", "新建");        String name = (String) currentUser.getPrincipal();        List<UserLogin> users = UserLogin.dao.find("select * from user_login where user_name='" + name + "'");        transferOrderMilestone.set("create_by", users.get(0).get("id"));        transferOrderMilestone.set("location", "");        java.util.Date utilDate = new java.util.Date();        java.sql.Timestamp sqlDate = new java.sql.Timestamp(utilDate.getTime());        transferOrderMilestone.set("create_stamp", sqlDate);        transferOrderMilestone.set("type", TransferOrderMilestone.TYPE_PICKUP_ORDER_MILESTONE);        transferOrderMilestone.set("pickup_id", pickupOrder.get("id"));        transferOrderMilestone.save();    }        // 在途提货拼车单    public void pickupOrderMilestone(){    	render("/yh/pickup/pickupOrderMilestone.html");    	    }        // 列出所有的在途提货拼车单    public void pickupOrderMilestoneList(){    	Map<String, List> map = new HashMap<String, List>();        List<String> usernames = new ArrayList<String>();        List<TransferOrderMilestone> milestones = new ArrayList<TransferOrderMilestone>();        List<TransferOrderMilestone> transferOrderMilestones = TransferOrderMilestone.dao                .find("select pickup_id from transfer_order_milestone where type = '"+TransferOrderMilestone.TYPE_PICKUP_ORDER_MILESTONE+"' group by pickup_id");        for (TransferOrderMilestone pm : transferOrderMilestones) {        	if(pm.get("pickup_id") != null){		        TransferOrderMilestone transferOrderMilestone = TransferOrderMilestone.dao		        		.findFirst("select tom.*,dto.depart_no from transfer_order_milestone tom "		        				+ " left join depart_order dto on dto.id = "+pm.get("pickup_id")		        				+ " where tom.type = '"+TransferOrderMilestone.TYPE_PICKUP_ORDER_MILESTONE+"' and tom.status='在途' and tom.pickup_id="+pm.get("pickup_id")+" and dto.combine_type = '"+DepartOrder.COMBINE_TYPE_PICKUP+"' order by tom.create_stamp desc");	            UserLogin userLogin = UserLogin.dao.findById(transferOrderMilestone.get("create_by"));	            String username = userLogin.get("user_name");	            milestones.add(transferOrderMilestone);	            usernames.add(username);        	}        }        map.put("milestones", milestones);        map.put("usernames", usernames);        renderJson(map);    }}