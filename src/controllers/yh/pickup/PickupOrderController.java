package controllers.yh.pickup;import java.util.HashMap;import java.util.List;import java.util.Map;import models.yh.profile.Contact;import org.apache.shiro.SecurityUtils;import org.apache.shiro.subject.Subject;import com.jfinal.core.Controller;import com.jfinal.log.Logger;import com.jfinal.plugin.activerecord.Db;import com.jfinal.plugin.activerecord.Record;import controllers.yh.LoginUserController;public class PickupOrderController extends Controller {    private Logger logger = Logger.getLogger(PickupOrderController.class);        Subject currentUser = SecurityUtils.getSubject();    private boolean isAuthenticated() {        if (!currentUser.isAuthenticated()) {            redirect("/yh/login");            return false;        }        setAttr("userId", currentUser.getPrincipal());        return true;    }    public void index() {        if (!isAuthenticated())            return;        render("/yh/pickup/pickupOrderList.html");    }    public void add() {        setAttr("saveOK", false);        if (LoginUserController.isAuthenticated(this))            render("/yh/pickup/pickupOrderSearchTransfer.html");    }    // 配送单客户    public void selectCustomer() {        List<Contact> customer = Contact.dao                .find("select * from contact where id in(select contact_id from party where id in(SELECT customer_id  FROM TRANSFER_ORDER group by customer_id)) and id='1'");        renderJson(customer);    }    // 供应商列表,列出最近使用的5个客户    public void selectSp() {        List<Contact> contactjson = Contact.dao                .find("select * from contact c  where id in (select contact_id from party where party_type='SERVICE_PROVIDER' order by last_update_date desc limit 0,5)");        renderJson(contactjson);    }    public void createPickupOrder() {        render("/yh/pickup/editPickupOrder.html");    }    // 创建 结构 行为    public void pickuplist() {        String sLimit = "";        String pageIndex = getPara("sEcho");        if (getPara("iDisplayStart") != null                && getPara("iDisplayLength") != null) {            sLimit = " LIMIT " + getPara("iDisplayStart") + ", "                    + getPara("iDisplayLength");        }        String sqlTotal = "select count(1) total FROM DEPART_ORDER do "				+ " left join party p on do.notify_party_id = p.id "				+ " left join contact c on p.contact_id = c.id "				+ " left join depart_transfer dt on do.id = dt.depart_id where combine_type = 'PICKUP'";		Record rec = Db.findFirst(sqlTotal);		logger.debug("total records:" + rec.getLong("total"));		String sql = "SELECT do.*,c.contact_person,c.phone, (select group_concat(dt.TRANSFER_ORDER_NO separator '\r\n')  FROM DEPART_TRANSFER dt where DEPART_ID = do.id)  as TRANSFER_ORDER_NO  FROM DEPART_ORDER do "				+ " left join party p on do.notify_party_id = p.id "				+ " left join contact c on p.contact_id = c.id where combine_type = 'PICKUP'";		List<Record> warehouses = Db.find(sql);				Map map = new HashMap();		map.put("sEcho", pageIndex);		map.put("iTotalRecords", rec.getLong("total"));		map.put("iTotalDisplayRecords", rec.getLong("total"));		map.put("aaData", warehouses);		renderJson(map);    }    public void createList() {        String sLimit = "";        String pageIndex = getPara("sEcho");        if (getPara("iDisplayStart") != null                && getPara("iDisplayLength") != null) {            sLimit = " LIMIT " + getPara("iDisplayStart") + ", "                    + getPara("iDisplayLength");        }        String sqlTotal = "select count(1) total from transfer_order";        Record rec = Db.findFirst(sqlTotal);        logger.debug("total records:" + rec.getLong("total"));        String sql = "select * from transfer_order";        List<Record> transferOrders = Db.find(sql);        Map transferOrderListMap = new HashMap();        transferOrderListMap.put("sEcho", pageIndex);        transferOrderListMap.put("iTotalRecords", rec.getLong("total"));        transferOrderListMap.put("iTotalDisplayRecords", rec.getLong("total"));        transferOrderListMap.put("aaData", transferOrders);        renderJson(transferOrderListMap);    }}