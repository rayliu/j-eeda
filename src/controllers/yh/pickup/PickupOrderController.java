package controllers.yh.pickup;import java.util.HashMap;import java.util.List;import java.util.Map;import models.DepartOrder;import models.yh.profile.Contact;import org.apache.shiro.SecurityUtils;import org.apache.shiro.subject.Subject;import com.jfinal.core.Controller;import com.jfinal.log.Logger;import com.jfinal.plugin.activerecord.Db;import com.jfinal.plugin.activerecord.Record;import controllers.yh.LoginUserController;public class PickupOrderController extends Controller {    private Logger logger = Logger.getLogger(PickupOrderController.class);        Subject currentUser = SecurityUtils.getSubject();    private boolean isAuthenticated() {        if (!currentUser.isAuthenticated()) {            redirect("/yh/login");            return false;        }        setAttr("userId", currentUser.getPrincipal());        return true;    }    public void index() {        if (!isAuthenticated())            return;        render("/yh/pickup/pickupOrderList.html");    }    public void add() {        setAttr("saveOK", false);        if (LoginUserController.isAuthenticated(this))            render("/yh/pickup/pickupOrderSearchTransfer.html");    }    // 配送单客户    public void selectCustomer() {        List<Contact> customer = Contact.dao                .find("select * from contact where id in(select contact_id from party where id in(SELECT customer_id  FROM TRANSFER_ORDER group by customer_id)) and id='1'");        renderJson(customer);    }    // 供应商列表,列出最近使用的5个客户    public void selectSp() {        List<Contact> contactjson = Contact.dao                .find("select * from contact c  where id in (select contact_id from party where party_type='SERVICE_PROVIDER' order by last_update_date desc limit 0,5)");        renderJson(contactjson);    }    public void createPickupOrder() {        render("/yh/pickup/editPickupOrder.html");    }    // 创建 结构 行为    public void pickuplist() {        String sLimit = "";        String pageIndex = getPara("sEcho");        if (getPara("iDisplayStart") != null                && getPara("iDisplayLength") != null) {            sLimit = " LIMIT " + getPara("iDisplayStart") + ", "                    + getPara("iDisplayLength");        }        String sqlTotal = "select count(1) total FROM DEPART_ORDER do "				+ " left join party p on do.notify_party_id = p.id "				+ " left join contact c on p.contact_id = c.id "				+ " left join depart_transfer dt on do.id = dt.depart_id where combine_type = '"+DepartOrder.COMBINE_TYPE_PICKUP+"'";		Record rec = Db.findFirst(sqlTotal);		logger.debug("total records:" + rec.getLong("total"));		String sql = "SELECT do.*,c.contact_person,c.phone, (select group_concat(dt.TRANSFER_ORDER_NO separator '\r\n')  FROM DEPART_TRANSFER dt where DEPART_ID = do.id)  as TRANSFER_ORDER_NO  FROM DEPART_ORDER do "				+ " left join party p on do.notify_party_id = p.id "				+ " left join contact c on p.contact_id = c.id where combine_type = '"+DepartOrder.COMBINE_TYPE_PICKUP+"'";		List<Record> warehouses = Db.find(sql);				Map map = new HashMap();		map.put("sEcho", pageIndex);		map.put("iTotalRecords", rec.getLong("total"));		map.put("iTotalDisplayRecords", rec.getLong("total"));		map.put("aaData", warehouses);		renderJson(map);    }    public void createList() {        Map transferOrderListMap = null;    	String orderNo = getPara("orderNo");        String status = getPara("status");        String address = getPara("address");        String customer = getPara("customer");        String routeFrom = getPara("routeFrom");        String routeTo = getPara("routeTo");        if("".equals(routeFrom) && "".equals(routeTo)){        	routeFrom = null;        	routeTo = null;        }        String beginTime = getPara("beginTime");        String endTime = getPara("endTime");                String sLimit = "";        if (orderNo == null && status == null && address == null && customer == null && routeFrom == null && routeTo == null && beginTime == null && endTime == null) {	        String pageIndex = getPara("sEcho");	        if (getPara("iDisplayStart") != null	                && getPara("iDisplayLength") != null) {	            sLimit = " LIMIT " + getPara("iDisplayStart") + ", "	                    + getPara("iDisplayLength");	        }		        String sqlTotal = "select count(1) total from transfer_order";	        Record rec = Db.findFirst(sqlTotal);	        logger.debug("total records:" + rec.getLong("total"));	                                                                                               	        String sql = "select to.order_no,to.cargo_nature,"					+" (select sum(toi.weight) from transfer_order_item toi where toi.order_id = to.id) as total_weight,"  					+" (select sum(toi.volume) from transfer_order_item toi where toi.order_id = to.id) as total_volumn," 					+" (select sum(toi.amount) from transfer_order_item toi where toi.order_id = to.id) as total_amount," 					+" to.address,to.pickup_mode,to.status,c.company_name cname,"					+" l1.name route_from,l2.name route_to,to.CREATE_STAMP from transfer_order to "					+" left join party p on to.customer_id = p.id "					+" left join contact c on p.contact_id = c.id "					+" left join location l1 on to.route_from = l1.code "					+" left join location l2 on to.route_to = l2.code"					+" order by to.CREATE_STAMP desc";		        List<Record> transferOrders = Db.find(sql);		        transferOrderListMap = new HashMap();	        transferOrderListMap.put("sEcho", pageIndex);	        transferOrderListMap.put("iTotalRecords", rec.getLong("total"));	        transferOrderListMap.put("iTotalDisplayRecords", rec.getLong("total"));		        transferOrderListMap.put("aaData", transferOrders);        }else if (routeFrom == null && routeTo == null) {	        String pageIndex = getPara("sEcho");	        if (getPara("iDisplayStart") != null	                && getPara("iDisplayLength") != null) {	            sLimit = " LIMIT " + getPara("iDisplayStart") + ", "	                    + getPara("iDisplayLength");	        }		        String sqlTotal = "select count(1) total from transfer_order";	        Record rec = Db.findFirst(sqlTotal);	        logger.debug("total records:" + rec.getLong("total"));	                                                                                               	        String sql = "select to.order_no,to.cargo_nature,"					+" (select sum(toi.weight) from transfer_order_item toi where toi.order_id = to.id) as total_weight,"  					+" (select sum(toi.volume) from transfer_order_item toi where toi.order_id = to.id) as total_volumn," 					+" (select sum(toi.amount) from transfer_order_item toi where toi.order_id = to.id) as total_amount," 					+" to.address,to.pickup_mode,to.status,c.company_name cname,"					+" l1.name route_from,l2.name route_to,to.CREATE_STAMP from transfer_order to "					+" left join party p on to.customer_id = p.id "					+" left join contact c on p.contact_id = c.id "					+" left join location l1 on to.route_from = l1.code "					+" left join location l2 on to.route_to = l2.code"					+" order by to.CREATE_STAMP desc";		        List<Record> transferOrders = Db.find(sql);		        transferOrderListMap = new HashMap();	        transferOrderListMap.put("sEcho", pageIndex);	        transferOrderListMap.put("iTotalRecords", rec.getLong("total"));	        transferOrderListMap.put("iTotalDisplayRecords", rec.getLong("total"));		        transferOrderListMap.put("aaData", transferOrders);        }else{        	if (beginTime == null || "".equals(beginTime)) {                beginTime = "1-1-1";            }            if (endTime == null || "".equals(endTime)) {                endTime = "9999-12-31";            }        	String pageIndex = getPara("sEcho");	        if (getPara("iDisplayStart") != null	                && getPara("iDisplayLength") != null) {	            sLimit = " LIMIT " + getPara("iDisplayStart") + ", "	                    + getPara("iDisplayLength");	        }		        String sqlTotal = "select count(1) total from transfer_order to "	        		+" left join party p on to.customer_id = p.id "					+" left join contact c on p.contact_id = c.id "					+" left join location l1 on to.route_from = l1.code "					+" left join location l2 on to.route_to = l2.code where l1.name like '%"+routeFrom+"%' and l2.name like '%"+routeTo+"%' and to.order_no like '%" + orderNo + "%' and to.status like '%"                    + status + "%' and to.address like '%" + address + "%' and c.COMPANY_NAME like '%" + customer                    + "%' and create_stamp between '" + beginTime + "' and '" + endTime + "'";	        Record rec = Db.findFirst(sqlTotal);	        logger.debug("total records:" + rec.getLong("total"));	                                                                                               	        String sql = "select to.order_no,to.cargo_nature,"					+" (select sum(toi.weight) from transfer_order_item toi where toi.order_id = to.id) as total_weight,"  					+" (select sum(toi.volume) from transfer_order_item toi where toi.order_id = to.id) as total_volumn," 					+" (select sum(toi.amount) from transfer_order_item toi where toi.order_id = to.id) as total_amount," 					+" to.address,to.pickup_mode,to.status,c.company_name cname,"					+" (SELECT name FROM LOCATION where CODE = to.route_from) route_from,(SELECT name FROM LOCATION where CODE = to.route_to) route_to,to.CREATE_STAMP from transfer_order to "					+" left join party p on to.customer_id = p.id "					+" left join contact c on p.contact_id = c.id "					+" left join location l1 on to.route_from = l1.code "					+" left join location l2 on to.route_to = l2.code where l1.name like '%"+routeFrom+"%' and l2.name like '%"+routeTo+"%' and to.order_no like '%" + orderNo + "%' and to.status like '%"                    + status + "%' and to.address like '%" + address + "%' and c.COMPANY_NAME like '%" + customer                    + "%' and create_stamp between '" + beginTime + "' and '" + endTime + "'"					+" order by to.CREATE_STAMP desc";		        List<Record> transferOrders = Db.find(sql);		        transferOrderListMap = new HashMap();	        transferOrderListMap.put("sEcho", pageIndex);	        transferOrderListMap.put("iTotalRecords", rec.getLong("total"));	        transferOrderListMap.put("iTotalDisplayRecords", rec.getLong("total"));		        transferOrderListMap.put("aaData", transferOrders);        }        renderJson(transferOrderListMap);    }}