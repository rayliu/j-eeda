package controllers.yh;import interceptor.SetAttrLoginUserInterceptor;import java.io.BufferedReader;import java.io.File;import java.io.FileReader;import java.io.IOException;import org.apache.shiro.authz.annotation.RequiresAuthentication;import com.jfinal.aop.Before;import com.jfinal.core.Controller;import com.jfinal.log.Logger;@RequiresAuthentication@Before(SetAttrLoginUserInterceptor.class)public class LogController extends Controller {    private Logger logger = Logger.getLogger(LogController.class);    private static String classPath = null;        private String getClassPath() {        if(classPath == null){            classPath = new File(".").getAbsolutePath();        }        return classPath;    }        public void index() {        try {            logger.debug("classPath="+System.getProperty("user.dir"));                        renderText(readFileAsString(System.getProperty("user.dir")+"/../logs/eeda.log"));        } catch (IOException e) {            e.printStackTrace();            renderText("debug log can not find.");        }    }    private String readFileAsString(String filePath) throws IOException {        StringBuffer fileData = new StringBuffer();        BufferedReader reader = new BufferedReader(new FileReader(filePath));        char[] buf = new char[1024];        int numRead = 0;        while ((numRead = reader.read(buf)) != -1) {            String readData = String.valueOf(buf, 0, numRead);            fileData.append(readData);        }        reader.close();        return fileData.toString();    }        public void mem(){    	String str = "";    	/* Total number of processors or cores available to the JVM */    	str+="Available processors (cores): " +             Runtime.getRuntime().availableProcessors()+"\n";        /* Total amount of free memory available to the JVM */    	str+="Free memory: " +             Runtime.getRuntime().freeMemory()/1024/1024+"M\n";        /* This will return Long.MAX_VALUE if there is no preset limit */        long maxMemory = Runtime.getRuntime().maxMemory();        /* Maximum amount of memory the JVM will attempt to use */        str+="Maximum memory: " +             (maxMemory == Long.MAX_VALUE ? "no limit" : maxMemory/1024/1024)+"M\n";        /* Total memory currently available to the JVM */            str+="Total memory available to JVM: " +             Runtime.getRuntime().totalMemory()/1024/1024+"M\n\n";        /* Get a list of all filesystem roots on this system */        File[] roots = File.listRoots();        /* For each filesystem root, print some info */                for (File root : roots) {        	str+="File system root: " + root.getAbsolutePath()+"\n";        	str+="Total space: " + root.getTotalSpace()/1024/1024+"M\n";        	str+="Free space: " + root.getFreeSpace()/1024/1024+"M\n";        	str+="Usable space: " + root.getUsableSpace()/1024/1024+"M\n";        }    	renderText(str);    }}