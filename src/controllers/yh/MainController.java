package controllers.yh;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import models.ParentOfficeModel;import models.UserLogin;import models.yh.profile.OfficeCofig;import org.apache.commons.lang.StringUtils;import org.apache.commons.mail.DefaultAuthenticator;import org.apache.commons.mail.Email;import org.apache.commons.mail.SimpleEmail;import org.apache.shiro.SecurityUtils;import org.apache.shiro.authc.AuthenticationException;import org.apache.shiro.authc.IncorrectCredentialsException;import org.apache.shiro.authc.LockedAccountException;import org.apache.shiro.authc.UnknownAccountException;import org.apache.shiro.authc.UsernamePasswordToken;import org.apache.shiro.session.Session;import org.apache.shiro.subject.Subject;import org.apache.shiro.web.util.SavedRequest;import org.apache.shiro.web.util.WebUtils;import com.jfinal.core.Controller;import com.jfinal.ext.plugin.shiro.ShiroKit;import com.jfinal.log.Logger;import com.jfinal.plugin.activerecord.Db;import com.jfinal.plugin.activerecord.Record;import controllers.yh.util.ParentOffice;import controllers.yh.util.getCurrentPermission;public class MainController extends Controller {	private Logger logger = Logger.getLogger(MainController.class);    // in config route已经将路径默认设置为/yh    // me.add("/yh", controllers.yh.AppController.class, "/yh");    Subject currentUser = SecurityUtils.getSubject();    private boolean isAuthenticated() {        // remember me 处理，自动帮user 登陆        if (!currentUser.isAuthenticated() && currentUser.isRemembered()) {            Object principal = currentUser.getPrincipal();            if (null != principal) {                UserLogin user = UserLogin.dao.findFirst("select * from user_login where user_name='" + String.valueOf(principal) + "' and (is_stop = 0 or is_stop is null)");                if(user==null){//这里是预防user使用了remember me, 但是user ID在表中已删除                	redirect("/login");                	return false;                }                String password = user.getStr("password");                UsernamePasswordToken token = new UsernamePasswordToken(user.getStr("user_name"), password);                token.setRememberMe(true);                currentUser.login(token);// 登录            }        }        if (!currentUser.isAuthenticated()) {            redirect("/login");            return false;        }        setAttr("userId", currentUser.getPrincipal());        // timeout:-1000ms 这样设置才能永不超时     	currentUser.getSession().setTimeout(-1000L);    	        return true;    }    public void index() {    	setSysTitle();        if (isAuthenticated()) {        	UserLogin user = UserLogin.dao.findFirst("select * from user_login where user_name=?",currentUser.getPrincipal());        	            if(user.get("c_name")!=null&&!"".equals(user.get("c_name"))){            	setAttr("userId", user.get("c_name"));            }else{            	setAttr("userId", currentUser.getPrincipal());            }                        setAttr("user_login_id", currentUser.getPrincipal());            setAttr("login_time",user.get("last_login"));            setAttr("lastIndex",user.get("last_index") == null ? "pastOneDay" : user.get("last_index"));                        //查询两个月内即将过期的客户合同            String sql ="select c.id, c.name, c.period_to from user_customer uc"					+" left join contract c on c.party_id= uc.customer_id  "					+" LEFT JOIN party p ON c.party_id = p.id and p.party_type = 'CUSTOMER'"				    +" where uc.user_name='"+currentUser.getPrincipal()+"'"					+" and c.period_to > SYSDATE()"					+" and c.period_to < DATE_ADD(SYSDATE(), INTERVAL 60 DAY);  ";            List<Record> contractList = Db.find(sql);            setAttr("contractList", contractList);            //更新当前用户最后一次登陆的时间            updateLastLogin(user);                        //查询当前用户权限，并且将其设置到会话当中            setPermissionToSession();	            String savedRequestUrl = this.getSessionAttr(ShiroKit.getSavedRequestKey());            if(savedRequestUrl!=null){            	setSessionAttr(ShiroKit.getSavedRequestKey(), null);            	redirect(savedRequestUrl);            }else{            	String officeConfig="select oc.index_page_path from office_config oc "            			+ " where oc.office_id =?";            	Record rec = Db.findFirst(officeConfig, user.getLong("office_id"));            	if(rec == null || rec.getStr("index_page_path") == null){            		render("/yh/index.html");            	}else{            		render(rec.getStr("index_page_path"));            	}            }        }    }	private void setPermissionToSession() {		ParentOfficeModel pom = ParentOffice.getInstance().getOfficeId(this);		getCurrentPermission getPermission = getCurrentPermission.getInstance();		Map<String,String> map = getPermission.currentHasPermission(currentUser,pom);		setSessionAttr("permissionMap", map);		setAttr("permissionMap", map);	}	private void updateLastLogin(UserLogin user) {		Date now = new Date(); 		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");//可以方便地修改日期格式		String currentTime = dateFormat.format( now );		user.set("last_login", currentTime);		user.update();	}    public void login() {    	if (isAuthenticated()) {    		redirect("/");    	}        String username = getPara("username");                setSysTitle();                if (username == null) {            render("/yh/login.html");            return;        }        UsernamePasswordToken token = new UsernamePasswordToken(getPara("username"), getPara("password"));        if (getPara("remember") != null && "Y".equals(getPara("remember")))            token.setRememberMe(true);        String errMsg = "";        try {            currentUser.login(token);            if (getPara("remember") != null && "Y".equals(getPara("remember"))){                // timeout:-1000ms 这样设置才能永不超时             	currentUser.getSession().setTimeout(-1000L);            }        } catch (UnknownAccountException uae) {            errMsg = "用户名不存在";            errMsg = "用户名/密码不正确";            uae.printStackTrace();        } catch (IncorrectCredentialsException ice) {            errMsg = "密码不正确";            errMsg = "用户名/密码不正确";            ice.printStackTrace();        } catch (LockedAccountException lae) {            errMsg = "用户名已被停用";            lae.printStackTrace();        } catch (AuthenticationException ae) {            errMsg = "用户名/密码不正确";            ae.printStackTrace();        }        if (errMsg.length()==0) {        	        	UserLogin user = UserLogin.dao.findFirst("select * from user_login where user_name=? and (is_stop = 0 or is_stop is null)",currentUser.getPrincipal());        	        	        	if(user==null){            	errMsg = "用户名不存在或已被停用";            	setAttr("errMsg", errMsg);            	render("/yh/login.html");            }else if(user.get("c_name") != null && !"".equals(user.get("c_name"))){            	setAttr("userId", user.get("c_name"));            	/*setAttr("login_time",user.get("last_login"));*/            	redirect("/");            	//render("/yh/index.html");            }else{            	setAttr("userId",currentUser.getPrincipal());            	/*setAttr("login_time",user.get("last_login"));*/            	redirect("/");            	//render("/yh/index.html");            };                              } else {            setAttr("errMsg", errMsg);            render("/yh/login.html");        }    }	private void setSysTitle() {		String serverName = getRequest().getServerName();        String basePath = getRequest().getScheme()+"://"+getRequest().getServerName()+":"+getRequest().getServerPort()+"/";                logger.debug(serverName);        OfficeCofig of = OfficeCofig.dao.findFirst("select * from office_config where domain like '"+serverName +"%' or domain like '%"+serverName +"%'");        if(of==null){//没有配置公司的信息会导致页面出错，显示空白页        	of = new OfficeCofig();        	of.set("system_title", "易达物流");        	of.set("logo", "/yh/img/eeda_logo.ico");        }        setAttr("SYS_CONFIG", of);	}    public void logout() {        currentUser.logout();        redirect("/login");    }    // 使用common-email, javamail    public void testMail() throws Exception {        Email email = new SimpleEmail();        email.setHostName("smtp.exmail.qq.com");        email.setSmtpPort(465);        email.setAuthenticator(new DefaultAuthenticator("",""));        email.setSSLOnConnect(true);        email.setFrom("");        email.setSubject("忘记密码");        email.setMsg("你的密码已重置");        email.addTo("");        email.send();            }        public void getTodoList(){        Map orderMap = new HashMap();        String pageIndex = getPara("sEcho");        String sLimit = "";        if (getPara("iDisplayStart") != null && getPara("iDisplayLength") != null) {            sLimit = " LIMIT " + getPara("iDisplayStart") + ", " + getPara("iDisplayLength");        }        //TODO: 过滤当前用户的网点        Calendar pastDay = Calendar.getInstance();        pastDay.add(Calendar.DAY_OF_WEEK, -5);        String sql = "select id, order_no, business_stamp, status from delivery_order"                + " where status = '新建' "                + " and (business_stamp > date_sub(now(),INTERVAL 5 DAY)"                + " or now() >= business_stamp)";        Record rec = Db.findFirst("select count(1) total from (" + sql + ") A");                List<Record> list = Db.find(sql + sLimit);                orderMap.put("sEcho", pageIndex);        orderMap.put("iTotalRecords", rec.getLong("total"));        orderMap.put("iTotalDisplayRecords", rec.getLong("total"));        orderMap.put("aaData", list);        renderJson(orderMap);    }        public void m() {        String module_id = getPara(0);        String param1 = getPara(1);                String page = "";        if(param1 == null){            page = "/yh/profile/module/searchOrder.html";        }else{            if(StringUtils.isNumeric(param1)){//edit                setAttr("order_id", param1);            }else if("add".equals(param1)){                            }            page = "/yh/profile/module/editOrder.html";        }        UserLogin user = LoginUserController.getLoginUser(this);        //查询当前用户菜单        String sql ="select distinct module.* from modules o, modules module "                +"where o.parent_id = module.id and o.office_id=? and o.status = '启用' order by seq";        List<Record> modules = Db.find(sql, user.get("office_id"));        for (Record module : modules) {            sql ="select * from modules where parent_id =? order by seq";            List<Record> orders = Db.find(sql, module.get("id"));            module.set("orders", orders);        }        setAttr("modules", modules);        setAttr("module_id", module_id);        render(page);    }}